// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	system_c_v_e_allowlist "github.com/mittwald/goharbor-client/v4/apiv2/internal/api/client/system_c_v_e_allowlist"
)

// MockSystem_c_v_e_allowlistClientService is an autogenerated mock type for the ClientService type
type MockSystem_c_v_e_allowlistClientService struct {
	mock.Mock
}

// GetSystemCVEAllowlist provides a mock function with given fields: params, authInfo
func (_m *MockSystem_c_v_e_allowlistClientService) GetSystemCVEAllowlist(params *system_c_v_e_allowlist.GetSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter) (*system_c_v_e_allowlist.GetSystemCVEAllowlistOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *system_c_v_e_allowlist.GetSystemCVEAllowlistOK
	if rf, ok := ret.Get(0).(func(*system_c_v_e_allowlist.GetSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter) *system_c_v_e_allowlist.GetSystemCVEAllowlistOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system_c_v_e_allowlist.GetSystemCVEAllowlistOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*system_c_v_e_allowlist.GetSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSystemCVEAllowlist provides a mock function with given fields: params, authInfo
func (_m *MockSystem_c_v_e_allowlistClientService) PutSystemCVEAllowlist(params *system_c_v_e_allowlist.PutSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter) (*system_c_v_e_allowlist.PutSystemCVEAllowlistOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *system_c_v_e_allowlist.PutSystemCVEAllowlistOK
	if rf, ok := ret.Get(0).(func(*system_c_v_e_allowlist.PutSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter) *system_c_v_e_allowlist.PutSystemCVEAllowlistOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*system_c_v_e_allowlist.PutSystemCVEAllowlistOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*system_c_v_e_allowlist.PutSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockSystem_c_v_e_allowlistClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
