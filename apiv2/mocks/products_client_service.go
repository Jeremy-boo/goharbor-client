// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	products "github.com/mittwald/goharbor-client/v4/apiv2/internal/legacyapi/client/products"
	mock "github.com/stretchr/testify/mock"
)

// MockProductsClientService is an autogenerated mock type for the ClientService type
type MockProductsClientService struct {
	mock.Mock
}

// DeleteChartrepoRepoChartsNameVersionLabelsID provides a mock function with given fields: params, authInfo
func (_m *MockProductsClientService) DeleteChartrepoRepoChartsNameVersionLabelsID(params *products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, authInfo runtime.ClientAuthInfoWriter) (*products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, runtime.ClientAuthInfoWriter) *products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChartrepoRepoChartsNameVersionLabels provides a mock function with given fields: params, authInfo
func (_m *MockProductsClientService) GetChartrepoRepoChartsNameVersionLabels(params *products.GetChartrepoRepoChartsNameVersionLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*products.GetChartrepoRepoChartsNameVersionLabelsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.GetChartrepoRepoChartsNameVersionLabelsOK
	if rf, ok := ret.Get(0).(func(*products.GetChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) *products.GetChartrepoRepoChartsNameVersionLabelsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetChartrepoRepoChartsNameVersionLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostChartrepoRepoChartsNameVersionLabels provides a mock function with given fields: params, authInfo
func (_m *MockProductsClientService) PostChartrepoRepoChartsNameVersionLabels(params *products.PostChartrepoRepoChartsNameVersionLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostChartrepoRepoChartsNameVersionLabelsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostChartrepoRepoChartsNameVersionLabelsOK
	if rf, ok := ret.Get(0).(func(*products.PostChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) *products.PostChartrepoRepoChartsNameVersionLabelsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostChartrepoRepoChartsNameVersionLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostEmailPing provides a mock function with given fields: params, authInfo
func (_m *MockProductsClientService) PostEmailPing(params *products.PostEmailPingParams, authInfo runtime.ClientAuthInfoWriter) (*products.PostEmailPingOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *products.PostEmailPingOK
	if rf, ok := ret.Get(0).(func(*products.PostEmailPingParams, runtime.ClientAuthInfoWriter) *products.PostEmailPingOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostEmailPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostEmailPingParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockProductsClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
